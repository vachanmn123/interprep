// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum TestType {
    TECHNICAL
    HR
}

enum QuestionType {
    MULTIPLE_CHOICE
    TRUE_FALSE
    SHORT_ANSWER
    LONG_ANSWER
}

enum AttemptStatus {
    IN_PROGRESS
    SUBMITTED
    EVALUATED
}

model Candidate {
    id           String        @id @default(cuid())
    name         String
    email        String        @unique
    resumeKey    String
    resumeData   String // if you ever switch to Postgres you can make this Json
    tests        Test[]
    testAttempts TestAttempt[]

    @@map("candidates")
}

model Test {
    id          String        @id @default(cuid())
    title       String
    type        TestType
    // startTime   DateTime
    // endTime     DateTime
    expiresAt   DateTime
    candidateId String
    candidate   Candidate     @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    questions   Question[]
    attempts    TestAttempt[]

    @@index([candidateId])
    @@map("tests")
}

model Question {
    id                String              @id @default(cuid())
    text              String
    answer            Boolean? // for TF questions
    type              QuestionType
    maxScore          Int                 @default(1)
    timeLimit         Int? // seconds allowed
    testId            String
    test              Test                @relation(fields: [testId], references: [id], onDelete: Cascade)
    options           QuestionOption[]
    TestAttemptAnswer TestAttemptAnswer[]

    @@index([testId])
    @@map("questions")
}

model QuestionOption {
    id         String   @id @default(cuid())
    label      String
    // value      String
    isCorrect  Boolean  @default(false)
    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@unique([questionId, label])
    @@index([questionId])
    @@map("question_options")
}

model TestAttempt {
    id          String              @id @default(cuid())
    startedAt   DateTime            @default(now())
    completedAt DateTime?
    status      AttemptStatus       @default(IN_PROGRESS)
    totalScore  Int?
    testId      String
    test        Test                @relation(fields: [testId], references: [id], onDelete: Cascade)
    candidateId String
    candidate   Candidate           @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    answers     TestAttemptAnswer[]

    @@index([testId])
    @@index([candidateId])
    @@map("test_attempts")
}

model TestAttemptAnswer {
    id            String      @id @default(cuid())
    testAttemptId String
    testAttempt   TestAttempt @relation(fields: [testAttemptId], references: [id], onDelete: Cascade)
    questionId    String
    question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

    // for MCQ / TF:
    selectedOptionIds Json? // e.g. ["optA","optC"]
    // for SHORT/LONG answers:
    response          String?

    isCorrect Boolean @default(false)
    score     Int     @default(0)
    timeTaken Int // seconds spent on this question

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([testAttemptId, questionId])
    @@index([testAttemptId])
    @@index([questionId])
    @@map("test_attempt_answers")
}
